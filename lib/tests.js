// Generated by CoffeeScript 1.9.0
(function() {
  var CND, H, alert, badge, debug, echo, handle, help, info, log, rpr, settings, test, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'HOTMETAL/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  H = require('..');

  handle = function(handler) {
    return function(error, result) {
      if (error != null) {
        throw error;
      }
      return handler(result);
    };
  };

  this["Object creation"] = function(T, done) {
    var chunk, close_tags, open_tags, _ref;
    T.eq(H._new_hotml(), []);
    _ref = chunk = H._new_chunk(), open_tags = _ref[0], test = _ref[1], close_tags = _ref[2];
    T.eq(chunk, [[], '', []]);
    return done();
  };

  this["Parsing 1"] = function(T, done) {
    var html;
    html = "foo bar baz";
    return H.parse(html, handle(function(hotml) {
      T.eq(hotml, [[[], 'foo ', []], [[], 'bar ', []], [[], 'baz', []]]);
      T.eq(html, H.as_html(hotml));
      return done();
    }));
  };

  this["Parsing 2"] = function(T, done) {
    var html;
    html = "foo <b>bar</b> baz";
    return H.parse(html, handle(function(hotml) {
      T.eq(hotml, [[[], "foo ", []], [["<b>"], "bar", ["</b>"]], [[], " baz", []]]);
      T.eq(html, H.as_html(hotml));
      return done();
    }));
  };

  this["Parsing 3"] = function(T, done) {
    var html;
    html = "foo <b>bar awesome</b> baz";
    return H.parse(html, handle(function(hotml) {
      T.eq(hotml, [[[], "foo ", []], [["<b>"], "bar ", []], [[], "awe­", []], [[], "some", ["</b>"]], [[], " baz", []]]);
      T.eq(html, H.as_html(hotml));
      return done();
    }));
  };

  this["Parsing 4"] = function(T, done) {
    var html;
    html = "foo <img src=\"x.jpg\"> <b>bar awesome</b> baz";
    return H.parse(html, handle(function(hotml) {
      T.eq(hotml, [[[], "foo ", []], [[], "<img src=\"x.jpg\">", []], [[], " ", []], [["<b>"], "bar ", []], [[], "awe­", []], [[], "some", ["</b>"]], [[], " baz", []]]);
      T.eq(html, H.as_html(hotml));
      return done();
    }));
  };

  this["Parsing 5"] = function(T, done) {
    var html;
    html = "<p>foo <img src=\"x.jpg\"> <b>bar awesome</b> baz</p>";
    return H.parse(html, handle(function(hotml) {
      T.eq(hotml, [[["<p>"], "foo ", []], [[], "<img src=\"x.jpg\">", []], [[], " ", []], [["<b>"], "bar ", []], [[], "awe­", []], [[], "some", ["</b>"]], [[], " baz", ["</p>"]]]);
      T.eq(html, H.as_html(hotml));
      return done();
    }));
  };

  this["Parsing 6"] = function(T, done) {
    var html;
    html = "<p><i><span class=\"special\">foo</span></i><wrap><img src=\"x.jpg\"></wrap><b>bar awesome</b> baz</p>";
    return H.parse(html, handle(function(hotml) {
      T.eq(hotml, [[["<p>", "<i>", "<span class=\"special\">"], "foo", ["</span>", "</i>"]], [["<wrap>"], "<img src=\"x.jpg\">", ["</wrap>"]], [["<b>"], "bar ", []], [[], "awe­", []], [[], "some", ["</b>"]], [[], " baz", ["</p>"]]]);
      T.eq(html, H.as_html(hotml));
      return done();
    }));
  };

  this["Parsing 7"] = function(T, done) {
    var html;
    html = html = "Lo <div id=\"mydiv\"><em><i>arcade &amp; &#x4e00; illustration <img src=\"x.jpg\">\n<b>bromance</b> cyberspace <span class=\"foo\"></span> necessarily</i></em> completely.</div>";
    return H.parse(html, handle(function(hotml) {
      T.eq(hotml, [[[], "Lo ", []], [["<div id=\"mydiv\">", "<em>", "<i>"], "ar­", []], [[], "cade ", []], [[], "& ", []], [[], "一 ", []], [[], "il­", []], [[], "lus­", []], [[], "tra­", []], [[], "tion ", []], [[], "<img src=\"x.jpg\">", []], [[], " ", []], [["<b>"], "bro­", []], [[], "mance", ["</b>"]], [[], " cy­", []], [[], "ber­", []], [[], "space ", []], [["<span class=\"foo\">"], "", ["</span>"]], [[], " nec­", []], [[], "es­", []], [[], "sar­", []], [[], "ily", ["</i>", "</em>"]], [[], " com­", []], [[], "pletely.", ["</div>"]]]);
      T.eq(H.as_html(hotml), 'Lo <div id="mydiv"><em><i>arcade & 一 illustration <img src="x.jpg"> <b>bromance</b> cyberspace <span class="foo"></span> necessarily</i></em> completely.</div>');
      return done();
    }));
  };

  this["`H.slice h`, `H.slice h, 0, h.length` return deep copies of `h`"] = function(T, done) {
    var html;
    html = "<p>foo <img src=\"x.jpg\"> <b>bar awesome</b> baz</p>";
    return H.parse(html, handle(function(hotml) {
      var close_tags_0, idx, open_tags_0, slice_0, slice_1, _, _i, _len, _ref;
      T.eq((slice_0 = H.slice(hotml)), hotml);
      T.eq((slice_1 = H.slice(hotml, 0, hotml.length)), hotml);
      T.ok(slice_0 !== hotml);
      T.ok(slice_1 !== hotml);
      T.ok(slice_0 !== slice_1);
      T.ok(slice_1 !== hotml);
      for (idx = _i = 0, _len = slice_0.length; _i < _len; idx = ++_i) {
        _ref = slice_0[idx], open_tags_0 = _ref[0], _ = _ref[1], close_tags_0 = _ref[2];
        T.ok(open_tags_0 !== slice_1[idx][0]);
        T.ok(close_tags_0 !== slice_1[idx][2]);
      }
      return done();
    }));
  };

  this["`H.slice` accepts negative and too big limits"] = function(T, done) {
    var html;
    html = "<p>foo <img src=\"x.jpg\"> <b>bar awesome</b> baz</p>";
    return H.parse(html, handle(function(hotml) {
      var slice;
      slice = H.slice(hotml, -100, Infinity);
      T.eq(slice, hotml);
      return done();
    }));
  };

  this["`H.slice` returns empty list if `start` gte `stop`"] = function(T, done) {
    var html;
    html = "<p>foo <img src=\"x.jpg\"> <b>bar awesome</b> baz</p>";
    return H.parse(html, handle(function(hotml) {
      var slice_0, slice_1;
      slice_0 = H.slice(hotml, 0, 0);
      slice_1 = H.slice(hotml, 5, 4);
      T.eq(slice_0, []);
      T.eq(slice_1, []);
      T.ok(slice_0 !== slice_1);
      return done();
    }));
  };

  this["`H.slice` returns list of length 1 if `start + 1` is `stop`"] = function(T, done) {
    var html, match;
    html = "<p>foo <img src=\"x.jpg\"> <b>bar awesome</b> baz</p>";
    match = "<p>foo</p>";
    return H.parse(html, handle(function(hotml) {
      var slice;
      slice = H.slice(hotml, 0, 1);
      T.eq(slice, [[["<p>"], "foo ", ["</p>"]]]);
      T.eq(H.as_html(slice), match);
      return done();
    }));
  };

  this["`H.slice` keeps opening tags from hotml that precedes slice"] = function(T, done) {
    var html, match;
    html = "<p>foo <img src=\"x.jpg\"> <b>bar awesome</b> baz</p>";
    match = "<p><img src=\"x.jpg\"></p>";
    return H.parse(html, handle(function(hotml) {
      var slice;
      slice = H.slice(hotml, 1, 2);
      T.eq(H.as_html(slice), match);
      return done();
    }));
  };

  this["`H.slice` 1"] = function(T, done) {
    var html, matches;
    html = "<p>foo <img src=\"x.jpg\"> <b>bar awesome</b> baz</p>";
    matches = ["<p><img src=\"x.jpg\"></p>", "<p><img src=\"x.jpg\"> <b>bar</b></p>", "<p><img src=\"x.jpg\"> <b>bar awe-</b></p>", "<p><img src=\"x.jpg\"> <b>bar awesome</b></p>", "<p><img src=\"x.jpg\"> <b>bar awesome</b> baz</p>"];
    return H.parse(html, handle(function(hotml) {
      var idx, match, slice, start, stop, _i, _ref;
      start = 1;
      idx = -1;
      for (stop = _i = 3, _ref = hotml.length; 3 <= _ref ? _i <= _ref : _i >= _ref; stop = 3 <= _ref ? ++_i : --_i) {
        idx += 1;
        match = matches[idx];
        slice = H.slice(hotml, start, stop);
        T.eq(H.as_html(slice), match);
      }
      return done();
    }));
  };

  this["`H.slice` 2"] = function(T, done) {
    var html, matches;
    html = "a<one>b<two>c<three>d</three>e</two>f</one>g";
    matches = ["a", "a<one>b</one>", "a<one>b<two>c</two></one>", "a<one>b<two>c<three>d</three></two></one>", "a<one>b<two>c<three>d</three>e</two></one>", "a<one>b<two>c<three>d</three>e</two>f</one>", "a<one>b<two>c<three>d</three>e</two>f</one>g"];
    return H.parse(html, handle(function(hotml) {
      var idx, match, slice, start, stop, _i, _ref, _ref1;
      start = 0;
      idx = -1;
      for (stop = _i = _ref = start + 1, _ref1 = hotml.length; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; stop = _ref <= _ref1 ? ++_i : --_i) {
        idx += 1;
        match = matches[idx];
        slice = H.slice(hotml, start, stop);
        T.eq(H.as_html(slice), match);
      }
      return done();
    }));
  };

  settings = null;

  test(this, settings);

}).call(this);
