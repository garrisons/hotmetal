// Generated by CoffeeScript 1.9.0
(function() {
  var CND, H, alert, badge, debug, echo, handle, help, info, log, rpr, settings, test, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'HOTMETAL/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  H = require('..');

  handle = function(handler) {
    return function(error, result) {
      if (error != null) {
        throw error;
      }
      return handler(result);
    };
  };

  this["Object creation"] = function(T, done) {
    var chunk, close_tags, open_tags, _ref;
    T.eq(H._new_hotml(), []);
    _ref = chunk = H._new_chunk(), open_tags = _ref[0], test = _ref[1], close_tags = _ref[2];
    T.eq(chunk, [[], '', []]);
    return done();
  };

  this["Object building 1"] = function(T, done) {
    var h;
    h = H._new_hotml();
    H.add(h, 'open-tag', 'div', {
      "class": 'foo bar'
    });
    H.add(h, 'open-tag', 'i', {});
    H.add(h, 'text', 'helo ');
    H.add(h, 'text', 'world!');
    H.add(h, 'close-tag', 'i');
    H.add(h, 'close-tag', 'div');
    T.eq(H.as_html(h), "<div class=\"foo bar\"><i>helo world!</i></div>");
    T.eq(h, [[["<div class=\"foo bar\">", "<i>"], "helo ", []], [[], "world!", ["</i>", "</div>"]]]);
    return done();
  };

  this["Object building 2"] = function(T, done) {
    var h;
    h = H._new_hotml();
    H.add(h, 'open-tag', 'div', {
      "class": 'foo bar'
    });
    H.add(h, 'text', 'helo ');
    H.add(h, 'lone-tag', 'img', {
      src: 'http:/example.com/y.jpg',
      "class": 'myimg'
    });
    H.add(h, 'open-tag', 'em', {});
    H.add(h, 'text', 'beautiful ');
    H.add(h, 'close-tag', 'em');
    H.add(h, 'close-tag', 'div');
    T.eq(H.as_html(h), "<div class=\"foo bar\">helo <img class=\"myimg\" src=\"http:/example.com/y.jpg\"><em>beautiful</em></div>");
    return done();
  };

  this["is-wrapped 1"] = function(T, done) {
    var h;
    h = H._new_hotml();
    H.add(h, 'open-tag', 'div', {
      "class": 'foo bar'
    });
    H.add(h, 'text', 'helo ');
    H.add(h, 'lone-tag', 'img', {
      src: 'http:/example.com/y.jpg',
      "class": 'myimg'
    });
    H.add(h, 'open-tag', 'em', {});
    H.add(h, 'text', 'beautiful ');
    H.add(h, 'close-tag', 'em');
    H.add(h, 'close-tag', 'div');
    T.eq(H.is_wrapped(h), true);
    return done();
  };

  this["is-wrapped 2"] = function(T, done) {
    var h;
    h = H._new_hotml();
    H.add(h, 'text', 'helo ');
    H.add(h, 'lone-tag', 'img', {
      src: 'http:/example.com/y.jpg',
      "class": 'myimg'
    });
    H.add(h, 'open-tag', 'em', {});
    H.add(h, 'text', 'beautiful ');
    H.add(h, 'close-tag', 'em');
    T.eq(H.is_wrapped(h), false);
    return done();
  };

  this["unwrapping 1"] = function(T, done) {
    var h;
    h = H._new_hotml();
    H.add(h, 'open-tag', 'div', {
      "class": 'foo bar'
    });
    H.add(h, 'text', 'helo ');
    H.add(h, 'lone-tag', 'img', {
      src: 'http:/example.com/y.jpg',
      "class": 'myimg'
    });
    H.add(h, 'open-tag', 'em', {});
    H.add(h, 'text', 'beautiful ');
    H.add(h, 'close-tag', 'em');
    H.add(h, 'close-tag', 'div');
    H.unwrap(h);
    T.eq(h, [[[], "helo ", []], [[], "<img class=\"myimg\" src=\"http:/example.com/y.jpg\">", []], [["<em>"], "beautiful ", ["</em>"]]]);
    return done();
  };

  this["unwrapping 2"] = function(T, done) {
    var h;
    h = H._new_hotml();
    H.add(h, 'text', 'helo ');
    H.add(h, 'lone-tag', 'img', {
      src: 'http:/example.com/y.jpg',
      "class": 'myimg'
    });
    H.add(h, 'open-tag', 'em', {});
    H.add(h, 'text', 'beautiful ');
    H.add(h, 'close-tag', 'em');
    H.unwrap(h, true);
    T.eq(h, [[[], "helo ", []], [[], "<img class=\"myimg\" src=\"http:/example.com/y.jpg\">", []], [["<em>"], "beautiful ", ["</em>"]]]);
    return done();
  };

  settings = {
    'timeout': 500
  };

  test(this, settings);

}).call(this);
