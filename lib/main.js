// Generated by CoffeeScript 1.9.0
(function() {
  var html_of_collector, html_structure, rpr_of_collector, slice,
    __slice = [].slice;

  rpr_of_collector = function(collector) {
    return columnify(collector);
  };

  html_of_collector = function(collector) {
    var R, idx, list_of_close_tags, list_of_open_tags, t, text, texts, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    R = [];
    list_of_open_tags = collector[0], texts = collector[1], list_of_close_tags = collector[2];
    for (idx = _i = 0, _len = texts.length; _i < _len; idx = ++_i) {
      text = texts[idx];
      _ref = list_of_open_tags[idx];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        t = _ref[_j];
        R.push(t);
      }
      R.push(text);
      _ref1 = list_of_close_tags[idx];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        t = _ref1[_k];
        R.push(t);
      }
    }
    return R.join('');
  };

  slice = function(collector, start, stop) {
    var R, i_close_tag, i_close_tags, i_list_of_close_tags, i_list_of_open_tags, i_open_tag, i_open_tags, i_texts, idx, initial_close_tags, initial_open_tags, main_idx, o_close_tags, o_list_of_close_tags, o_list_of_open_tags, o_open_tag_count, o_texts, sub_idx, tag_stack, target, _i, _j, _k, _l, _len, _len1, _m, _n, _ref, _ref1, _ref2;
    i_list_of_open_tags = collector[0], i_texts = collector[1], i_list_of_close_tags = collector[2];
    o_list_of_open_tags = [];
    o_texts = [];
    o_list_of_close_tags = [];
    R = [o_list_of_open_tags, o_texts, o_list_of_close_tags];
    if (start >= stop) {
      return R;
    }
    start = Math.max(start, 0);
    stop = Math.min(stop, i_texts.length - 1);
    o_open_tag_count = 0;
    tag_stack = [];
    initial_open_tags = [];
    initial_close_tags = [];
    o_list_of_open_tags.push(initial_open_tags);
    o_texts.push('');
    o_list_of_close_tags.push(initial_close_tags);

    /* Walking backwards from `start` to the beginning, collecting closing and opening tags: */
    for (main_idx = _i = _ref = start - 1; _i >= 0; main_idx = _i += -1) {
      i_open_tags = i_list_of_open_tags[main_idx];
      i_close_tags = i_list_of_close_tags[main_idx];
      o_open_tag_count -= i_close_tags.length;
      for (sub_idx = _j = _ref1 = i_open_tags.length - 1; _j >= 0; sub_idx = _j += -1) {
        o_open_tag_count += 1;
        if (!(o_open_tag_count > 0)) {
          continue;
        }
        tag_stack.unshift(i_open_tags[sub_idx]);
        initial_open_tags.unshift(i_open_tags[sub_idx]);
      }
    }

    /* Walking forward through the slice: */
    for (main_idx = _k = start; _k < stop; main_idx = _k += +1) {
      i_open_tags = i_list_of_open_tags[main_idx];
      i_close_tags = i_list_of_close_tags[main_idx];
      o_close_tags = [];
      o_open_tag_count += i_open_tags.length;
      o_open_tag_count -= i_close_tags.length;
      for (_l = 0, _len = i_open_tags.length; _l < _len; _l++) {
        i_open_tag = i_open_tags[_l];
        tag_stack.push(i_open_tag);
      }
      if (main_idx === start) {
        initial_open_tags.push.apply(initial_open_tags, i_open_tags);
        o_texts[0] = i_texts[main_idx];
        initial_close_tags.push.apply(initial_close_tags, i_close_tags);
      } else {
        o_list_of_open_tags.push(LODASH.clone(i_open_tags));
        o_texts.push(i_texts[main_idx]);
        o_list_of_close_tags.push(LODASH.clone(i_close_tags));
      }
      for (_m = 0, _len1 = i_close_tags.length; _m < _len1; _m++) {
        i_close_tag = i_close_tags[_m];
        tag_stack.pop();
      }
    }

    /* Closing all remaining open tags: */
    if (tag_stack.length > 0) {
      target = last_of(o_list_of_close_tags);
      for (idx = _n = _ref2 = tag_stack.length - 1; _ref2 <= 0 ? _n <= 0 : _n >= 0; idx = _ref2 <= 0 ? ++_n : --_n) {
        target.push(render_close_tag(tag_stack[idx].replace(/^<([^\s>]+).*$/, '$1')));
      }
    }
    return R;
  };

  html_structure = function() {
    var input, text;
    text = "lo <div id='mydiv'><em><i>arc <b>bo</b> cy <span class='foo'></span> dean</i></em> eps <img src='x.jpg'> foo gig hey</div>";
    input = D.create_throughstream();
    input.pipe(D.HTML.$parse()).pipe((function(_this) {
      return function() {
        var close_tags, collector, last_type, open_tags, texts;
        open_tags = [];
        texts = [];
        close_tags = [];
        collector = [open_tags, texts, close_tags];
        last_type = null;
        return $(function(event, send) {
          var start, stop, tail, type, _i;
          type = event[0], tail = 2 <= event.length ? __slice.call(event, 1) : [];
          switch (type) {
            case 'text':
            case 'lone-tag':
              switch (last_type) {
                case null:
                case 'close-tag':
                case 'lone-tag':
                case 'text':
                  open_tags.push([]);
                  texts.push(type === 'text' ? tail[0] : render_open_tag.apply(null, tail));
                  close_tags.push([]);
                  break;
                case 'open-tag':
                  texts[texts.length - 1] = tail[0];
                  break;
                default:
                  warn("1 ignored event of type " + (rpr(type)));
              }
              break;
            case 'open-tag':
              switch (last_type) {
                case null:
                case 'text':
                case 'lone-tag':
                case 'close-tag':
                  open_tags.push([render_open_tag.apply(null, tail)]);
                  texts.push('');
                  close_tags.push([]);
                  break;
                case 'open-tag':
                  (last_of(open_tags)).push(render_open_tag.apply(null, tail));
                  break;
                default:
                  warn("2 ignored event of type " + (rpr(type)));
              }
              break;
            case 'close-tag':
              switch (last_type) {
                case null:
                  throw new Error("encountered illegal HTML");
                  break;
                case 'text':
                case 'lone-tag':
                case 'close-tag':
                case 'open-tag':
                  (last_of(close_tags)).push(render_close_tag.apply(null, tail));
                  break;
                default:
                  warn("3 ignored event of type " + (rpr(type)));
              }
              break;
            case 'end':
              start = 5;
              for (stop = _i = 5; _i <= 9; stop = ++_i) {
                urge(start, stop, rpr_of_collector(slice(collector, start, stop)));
                info(start, stop, html_of_collector(slice(collector, start, stop)));
              }
              help(rpr_of_collector(collector));
              info(html_of_collector(collector));
              null;
              break;
            default:
              warn("4 ignored event of type " + (rpr(type)));
          }
          last_type = type;
          return send(collector);
        });
      };
    })(this)());
    input.write(text);
    return input.end();
  };

}).call(this);
