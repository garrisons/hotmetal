// Generated by CoffeeScript 1.9.0
(function() {
  var $, CND, D, TEACUP, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper,
    __slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'HOTMETAL';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  TEACUP = require('coffeenode-teacup');

  D = require('pipedreams2');

  $ = D.remit.bind(D);

  this.rpr = function(me) {
    return '\n' + CND.columnify(me, {
      paddingChr: '_'
    });
  };

  this.as_html = function(me) {
    var R, chunk, close_tags, idx, open_tags, t, text, _i, _j, _k, _len, _len1, _len2;
    R = [];
    for (idx = _i = 0, _len = me.length; _i < _len; idx = ++_i) {
      chunk = me[idx];
      open_tags = chunk[0], text = chunk[1], close_tags = chunk[2];
      for (_j = 0, _len1 = open_tags.length; _j < _len1; _j++) {
        t = open_tags[_j];
        R.push(t);
      }
      R.push(this._correct_text(me, chunk, idx));
      for (_k = 0, _len2 = close_tags.length; _k < _len2; _k++) {
        t = close_tags[_k];
        R.push(t);
      }
    }
    return R.join('');
  };

  this._correct_text = function(me, chunk, idx) {
    var R, close_tags, is_last, open_tags, text;
    open_tags = chunk[0], text = chunk[1], close_tags = chunk[2];
    if (text.length > 0 && text[0] === '<') {
      return text;
    }
    is_last = idx === me.length - 1;
    R = text;
    R = R.replace(/\xad$/, is_last ? '-' : '');
    if (is_last) {
      R = R.replace(/\s+$/, '');
    }

    /* TAINT must escape HTML special chrs */
    return R;
  };

  this.render_open_tag = function(name, attributes) {
    return (this.render_empty_tag(name, attributes)).replace(/<\/[^>]+>$/, '');
  };

  this.render_close_tag = function(name) {
    return "</" + name + ">";
  };

  this.render_as_close_tag = function(open_tag) {
    return this.render_close_tag(open_tag.replace(/^<([^\s>]+).*$/, '$1'));
  };

  this.render_empty_tag = function(name, attributes) {
    return TEACUP.render((function(_this) {
      return function() {
        return TEACUP.TAG(name, attributes);
      };
    })(this));
  };

  this._new_hotml = function() {
    return [];
  };

  this._new_chunk = function() {
    return [[], '', []];
  };

  this.slice = function(me, start, stop) {
    var R, close_tag, close_tags, first_open_tags, idx, last_close_tags, main_idx, open_tag, open_tag_count, open_tags, sub_idx, tag_stack, text, _i, _j, _k, _l, _len, _len1, _len2, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
    if (start == null) {
      start = 0;
    }
    if (stop == null) {
      stop = null;
    }
    if (stop == null) {
      stop = me.length;
    }
    start = Math.max(start, 0);
    stop = Math.min(stop, me.length);
    if (start >= stop) {
      return [];
    }
    R = CND.LODASH.cloneDeep(me);
    if (start === 0 && stop === me.length) {
      return R;
    }
    R = R.slice(start, stop);
    open_tag_count = 0;
    first_open_tags = R[0][0];
    last_close_tags = R[R.length - 1][2];
    tag_stack = [];

    /* Walking backwards from `start` to the beginning, collecting closing and opening tags: */
    for (main_idx = _i = _ref = start - 1; _i >= 0; main_idx = _i += -1) {
      _ref1 = me[main_idx], open_tags = _ref1[0], text = _ref1[1], close_tags = _ref1[2];
      open_tag_count -= close_tags.length;
      for (sub_idx = _j = _ref2 = open_tags.length - 1; _j >= 0; sub_idx = _j += -1) {
        open_tag_count += 1;
        if (!(open_tag_count > 0)) {
          continue;
        }
        first_open_tags.unshift(open_tags[sub_idx]);
      }
    }

    /* Closing all remaining open tags: */
    for (_k = 0, _len = R.length; _k < _len; _k++) {
      _ref3 = R[_k], open_tags = _ref3[0], text = _ref3[1], close_tags = _ref3[2];
      for (_l = 0, _len1 = open_tags.length; _l < _len1; _l++) {
        open_tag = open_tags[_l];
        tag_stack.push(open_tag);
      }
      for (_m = 0, _len2 = close_tags.length; _m < _len2; _m++) {
        close_tag = close_tags[_m];
        tag_stack.pop();
      }
    }
    for (idx = _n = _ref4 = tag_stack.length - 1; _n >= 0; idx = _n += -1) {
      last_close_tags.push(this.render_as_close_tag(tag_stack[idx]));
    }
    return R;
  };

  this.parse = function(html, settings, handler) {
    var arity;
    switch (arity = arguments.length) {
      case 2:
        handler = settings;
        settings = {};
        break;
      case 3:
        null;
        break;
      default:
        throw new Error("expected 2 or 3 arguments, got " + arity);
    }
    CND.validate_isa_function(handler);
    this._parse(html, settings, handler);
    return null;
  };

  this.$parse = function(html) {
    throw new Error("not implemented");
  };

  this._parse = function(html, settings, handler) {
    var hyphenate, hyphenation, input, _ref, _send;
    if (handler == null) {
      handler = null;
    }
    input = D.create_throughstream();
    _send = null;
    if (settings['hyphenation'] === false) {
      hyphenate = (function(_this) {
        return function(text) {
          return text;
        };
      })(this);
    } else {
      hyphenation = settings['hyphenation'] === true ? null : settings['hyphenation'];
      hyphenate = D.new_hyphenator(hyphenation);
    }
    if (handler == null) {
      handler = (function(_this) {
        return function(error, hotml) {
          if (error) {
            return _send.error(error);
          }
          return _send(hotml);
        };
      })(this);
    }
    input.pipe(D.HTML.$parse()).pipe(D.HTML.$collect_texts()).pipe(D.HTML.$disperse_texts((_ref = settings['hyphenation']) != null ? _ref : null)).pipe((function(_this) {
      return function() {
        var Z, last_type;
        Z = _this._new_hotml();
        last_type = null;
        return $(function(event, send) {
          var chunk, open_tags, tail, text, type, _ref;
          _send = send;
          type = event[0], tail = 2 <= event.length ? __slice.call(event, 1) : [];
          switch (type) {
            case 'text':
            case 'lone-tag':
              if (type === 'text') {
                text = tail[0];
              } else {
                text = _this.render_open_tag.apply(_this, tail);
              }
              switch (last_type) {
                case null:
                case 'close-tag':
                case 'lone-tag':
                case 'text':
                  Z.push(chunk = _this._new_chunk());
                  chunk[1] = text;
                  break;
                case 'open-tag':
                  (CND.last_of(Z))[1] = text;
                  break;
                default:
                  return handler(new Error("1 ignored event of type " + (rpr(type))));
              }
              break;
            case 'open-tag':
              switch (last_type) {
                case 'text':
                case null:
                case 'lone-tag':
                case 'close-tag':
                  Z.push((_ref = _this._new_chunk(), open_tags = _ref[0], _ref));
                  open_tags.push(_this.render_open_tag.apply(_this, tail));
                  break;
                case 'open-tag':
                  (CND.last_of(Z))[0].push(_this.render_open_tag.apply(_this, tail));
                  break;
                default:
                  return handler(new Error("2 ignored event of type " + (rpr(type))));
              }
              break;
            case 'close-tag':
              switch (last_type) {
                case null:
                  throw new Error("encountered illegal HTML");
                  break;
                case 'text':
                case 'lone-tag':
                case 'close-tag':
                case 'open-tag':
                  (CND.last_of(Z))[2].push(_this.render_close_tag.apply(_this, tail));
                  break;
                default:
                  return handler(new Error("3 ignored event of type " + (rpr(type))));
              }
              break;
            case 'end':
              handler(null, Z);
              break;
            default:
              return handler(new Error("4 ignored event of type " + (rpr(type))));
          }
          last_type = type;
          return send(Z);
        });
      };
    })(this)());
    input.write(html);
    return input.end();
  };

  this.demo = function() {
    var H, html;
    H = this;
    html = "Paragraph internationalization assignment (certainly) relativity.";
    html = "https://github.com/devongovett/linebreak";
    html = "中國皇帝北京上海香港";
    html = "볍쌀(영어: rice) 또는 쌀은 벼의 씨앗에서 껍질을 벗겨 낸 식량이다. 그(도정을 한) 정도에 따라, 왕겨만 살짝 벗겨내면 현미(매조미쌀, 핍쌀)가 되고, 곱게 쓿으면 흰쌀(아주먹이)이 된다. 밥이나 떡을 해서 먹으며, 식혜같은 음료나 소주, 청주 등 술의 원료가 된다.";
    html = "ข้าวเป็นธัญพืชซึ่งประชากรโลกบริโภคเป็นอาหารสำคัญ โดยเฉพาะอย่างยิ่งในทวีปเอเชีย จากข้อมูลเมื่อปี";
    html = "རྩོམ་ཡིག་འདི་ཆ་མི་ཚང་བས་རྩོམ་ཡིག་འདི་ཆ་ཚང་བོར་བཟོས་ནས་ཝེ་ཁེ་རིག་མཛོད་གོང་འཕེལ་གཏོང་རོགས།";
    html = "Lo <div id='mydiv'><em><i>arcade &amp; &#x4e00; illustration <img src='x.jpg'>\n<b>bromance</b> cyberspace <span class='foo'></span> necessarily</i></em> completely.</div>";
    return H.parse(html, (function(_this) {
      return function(error, hotml) {
        var delta, start, stop, _i, _j, _len, _ref;
        if (error != null) {
          throw error;
        }
        _ref = [0, 3, 10];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          start = _ref[_i];
          for (delta = _j = 0; _j <= 15; delta = ++_j) {
            stop = start + delta;
            info(start, stop, H.as_html(H.slice(hotml, start, stop)));
          }
        }
        urge(JSON.stringify(hotml));
        help(H.rpr(hotml));
        return info(H.as_html(hotml));
      };
    })(this));
  };

  if (module.parent == null) {
    this.demo();
  }

}).call(this);
